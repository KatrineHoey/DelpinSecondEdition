// <auto-generated />
using System;
using Lease.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Lease.Infrastructure.Migrations
{
    [DbContext(typeof(LeaseDbContext))]
    partial class LeaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Lease.Domain.Lease", b =>
                {
                    b.Property<Guid>("leaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("leaseId");

                    b.ToTable("Leases");
                });

            modelBuilder.Entity("Lease.Domain.Lease", b =>
                {
                    b.OwnsOne("Lease.Domain.City", "City", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.DateCreated", "DateCreated", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsDelivery", "IsDelivery", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsPaid", "IsPaid", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.LeaseId", "Id", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.Street", "Street", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.TotalPrice", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.ZipCode", "ZipCode", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
