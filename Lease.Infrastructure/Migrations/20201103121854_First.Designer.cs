// <auto-generated />
using System;
using Lease.Infrastructure;
using Lease.Infrastructure.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lease.Infrastructure.Migrations
{
    [DbContext(typeof(LeaseDbContext))]
    [Migration("20201103121854_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lease.Domain.Lease", b =>
                {
                    b.Property<Guid>("leaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("leaseId");

                    b.ToTable("Leases");
                });

            modelBuilder.Entity("Lease.Domain.Lease", b =>
                {
                    b.OwnsOne("Lease.Domain.City", "City", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.DateCreated", "DateCreated", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsDelivery", "IsDelivery", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.IsPaid", "IsPaid", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.LeaseId", "Id", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.Street", "Street", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.TotalPrice", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });

                    b.OwnsOne("Lease.Domain.ZipCode", "ZipCode", b1 =>
                        {
                            b1.Property<Guid>("leaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("leaseId");

                            b1.ToTable("Leases");

                            b1.WithOwner()
                                .HasForeignKey("leaseId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
