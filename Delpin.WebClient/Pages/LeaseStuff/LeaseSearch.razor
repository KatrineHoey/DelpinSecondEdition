@page "/lease/search"
@inject HttpClient client
@inject IJSRuntime js
@inject IModalDialogService ModalDialog

<section>
    <h3>Ordre</h3>
</section>

<section class="form-inline active-cyan-4 mb-3">
    <i class="fas fa-search mr-2 myicons" aria-hidden="true"></i>
    <input @bind-value="@SearchTerm" @onkeyup="Search" class="form-control mr-3 w-75 display-1" type="text" placeholder="Search" aria-label="Search">
    @if (Isloading == true)
    {
        <i class="fa fa-circle-o-notch fa-spin myicons" aria-hidden="true"></i>
    }
</section>


@if (orderlist == null)
{
    <i class="fa fa-circle-o-notch fa-spin myicons" aria-hidden="true"></i>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Kundenavn</th>
                <th>Oprettet</th>
                <th>Er betalt?</th>
                <th> </th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lease in orderlist)
            {
                <tr>
                    <td>@lease.LeaseId</td>
                    <td>@lease.BuyerName</td>
                    <td>@lease.DateCreated</td>
                    <td>@lease.IsPaid</td>
                    <td>
                        <a href="lease/details/@lease.LeaseId" class="btn btn-primary float-right mr-3">Se detaljer</a>
                    </td>
                    <td>
                        <button @onclick="@(() => Edit_Clicked(lease.LeaseId))" class="btn btn-primary float-right mr-3">Rediger</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(lease))">Slet</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}


@code {
    private string SearchTerm { get; set; } = "";
    private int Page { get; set; } = 0;
    private int PageSize { get; set; } = 1000;
    private List<LeaseViewModel.LeaseOrderListItem> orderlist;

    bool Isloading = false;

    protected override async Task OnInitializedAsync()
    {
        await GetListOfLease();
    }

    private async Task GetListOfLease()
    {
        orderlist = (await client.GetFromJsonAsync<List<LeaseViewModel.LeaseOrderListItem>>("gateway/lease")).ToList();
    }


    private async Task Search(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter") // fire on enter
        {
            Isloading = true;
            await SearchLeases(SearchTerm);
            Isloading = false;
        }
    }

    async Task SearchLeases(string searchterm)
    {
        orderlist = (await client.GetFromJsonAsync<List<LeaseViewModel.LeaseOrderListItem>>($"gateway/lease/search?SearchTerm={searchterm}&Page={Page}&PageSize={PageSize}")).ToList();
    }

    async void Edit_Clicked(Guid id)
    {
        ModalDialogParameters parameters = new ModalDialogParameters();
        parameters.Add("LeaseId", id);

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<EditLease>("", new ModalDialogOptions(), parameters);
        if (result.Success)
        {
            var searchterm = result.ReturnParameters.Get<string>("LeaseId");
        }
    }

    async Task Delete(LeaseViewModel.LeaseOrderListItem lease)
    {
        LeaseReadModelsDto.LeaseOrderListItem leaseDto = LeaseOrderListItemMapper.Map(lease);

        if (await js.InvokeAsync<bool>("confirm", $"Vil du slette {leaseDto.LeaseId}?"))
        {
            await client.DeleteAsync($"gateway/lease/lease?LeaseId={leaseDto.LeaseId}&IsDeleted={true}");
            await GetListOfLease();
        }
    }
}
