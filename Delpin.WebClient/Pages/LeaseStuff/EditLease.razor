@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject IModalDialogService ModalDialogService

<h3>Ændre i ordre</h3>

<LeaseForm ButtonText="Gem" Lease="@lease"
              OnValidSubmit="@Edit" />
@if (Isloading == true)
{
    <i class="fa fa-circle-o-notch fa-spin myicons text-center mt-2" aria-hidden="true"></i>
}



@code {
    [Parameter] public Guid LeaseId { get; set; }

    LeaseViewModel.LeaseOrderDetails lease = new LeaseViewModel.LeaseOrderDetails();
    bool Isloading = false;
    bool everythingWentGood = true;

    protected async override Task OnParametersSetAsync()
    {
        lease = await http.GetFromJsonAsync<LeaseViewModel.LeaseOrderDetails>($"gateway/lease/id?LeaseId={LeaseId}");

    }

    async Task Edit()
    {
        Isloading = true;

        LeaseReadModelsDto.LeaseOrderDetails leaseDto = LeaseOrderDetailsMapper.Map(lease);

        try
        {
            HttpResponseMessage response = null;

            response = await http.PutAsJsonAsync($"gateway/lease/adresse?LeaseId={LeaseId}&Street={leaseDto.Street}&ZipCode={leaseDto.ZipCode}&City={leaseDto.City}", leaseDto);
            CheckIfFailed(response);

            response = await http.PutAsJsonAsync($"gateway/lease/delivery?LeaseId={LeaseId}&IsDelivery={leaseDto.IsDelivery}", leaseDto);
            CheckIfFailed(response);


            response = await http.PutAsJsonAsync($"gateway/lease/paid?LeaseId={LeaseId}&IsPaid={leaseDto.IsPaid}", leaseDto);
            CheckIfFailed(response);




            if (everythingWentGood == true)
            {

                await js.InvokeVoidAsync("alert", $"Ordren er nu opdateret!");

                ModalDialogParameters returnParameters = new ModalDialogParameters();
                returnParameters.Add("CustomerId", leaseDto.BuyerId.ToString());
                ModalDialogService.Close(true, returnParameters);
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
            }

        }
        catch (Exception)
        {

            await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
        }


        Isloading = false;
    }

    private void CheckIfFailed(HttpResponseMessage response)
    {
        if (!response.IsSuccessStatusCode)
        {
            everythingWentGood = false;
        }
    }
}