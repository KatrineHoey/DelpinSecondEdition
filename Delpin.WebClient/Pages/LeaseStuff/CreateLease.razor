@page "/lease/create/{customerId}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject IModalDialogService ModalDialogService

<h3>Opret ny ordre</h3>

<LeaseForm ButtonText="Opret ny ordre" Lease="@lease"
              OnValidSubmit="@Create" />
@if (Isloading == true)
{
    <i class="fa fa-circle-o-notch fa-spin myicons text-center mt-2" aria-hidden="true"></i>
}

@code {
    [Parameter] public Guid CustomerId { get; set; }

    LeaseViewModel.LeaseOrderDetails lease = new LeaseViewModel.LeaseOrderDetails();


    bool Isloading = false;

    protected override async Task OnInitializedAsync()
    {
        LeaseDto.LeaseOrderDetails leaseDto = LeaseOrderDetailsMapper.Map(lease);

        var customer = await http.GetFromJsonAsync<CustomerViewModel.CustomerDetails>($"gateway/customer?CustomerId={CustomerId}");
        leaseDto.BuyerId = customer.CustomerId;
        leaseDto.BuyerName = customer.FullName;
        leaseDto.Street = customer.Street;
        leaseDto.ZipCode = customer.ZipCode;
        leaseDto.City = customer.City;
    }

    async Task Create()
    {

        Isloading = true;

        LeaseDto.LeaseOrderDetails leaseDto = LeaseOrderDetailsMapper.Map(lease);

        try
        {
            var id = Guid.NewGuid();
            var response = await http.PostAsJsonAsync($"gateway/lease?LeaseId={id}&BuyerId={leaseDto.BuyerId}&Street={leaseDto.Street}&ZipCode={leaseDto.ZipCode}&City={leaseDto.City}&IsDelivery={leaseDto.IsDelivery}&IsPaid={leaseDto.IsPaid}", leaseDto);
            if (response.IsSuccessStatusCode)
            {

                await js.InvokeVoidAsync("alert", $"Ordren er nu oprettet!");

                ModalDialogParameters returnParameters = new ModalDialogParameters();
                returnParameters.Add("CustomerId", leaseDto.BuyerId.ToString());
                ModalDialogService.Close(true, returnParameters);
                uriHelper.NavigateTo($"lease/details/{id.ToString()}");
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
            }

        }
        catch (Exception)
        {

            await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
        }


        Isloading = false;
    }
}