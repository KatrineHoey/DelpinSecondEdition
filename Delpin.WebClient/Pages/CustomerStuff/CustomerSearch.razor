@page "/customer/search"
@inject HttpClient client
@inject IJSRuntime js
@inject IModalDialogService ModalDialog

<section>
    <h3>Kunder</h3>

    <button @onclick="CreateNew_Clicked" class="btn btn-primary float-right mr-3">Opret ny kunde</button>

</section>

<section class="form-inline active-cyan-4 mb-3">
    <i class="fas fa-search mr-2 myicons" aria-hidden="true"></i>
    <input @bind-value="@SearchTerm" @onkeyup="Search" class="form-control mr-3 w-75 display-1" type="text" placeholder="Search" aria-label="Search">
    @if (Isloading == true)
    {
        <i class="fa fa-circle-o-notch fa-spin myicons" aria-hidden="true"></i>
    }
</section>



@if (customerlist == null)
{
    <p><em></em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Navn</th>
                <th>By</th>
                <th>Tlf.</th>
                <th> </th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerlist)
            {
            <tr>
                <td>@customer.CustomerId</td>
                <td>@customer.FullName</td>
                <td>@customer.City</td>
                <td>@customer.PhoneNo</td>
                <td>
                    <button @onclick="@(() => CreateNewLease_Clicked(customer.CustomerId, customer.FullName))" class="btn btn-primary float-right mr-3">Opret ny ordre</button>
                </td>
                <td>
                    <button class="btn btn-primary float-right mr-3">Se ordre</button>
                </td>
                <td>
                    <button @onclick="@(() => Edit_Clicked(customer.CustomerId))" class="btn btn-primary float-right mr-3">Rediger</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="@(() => Delete(customer))">Slet</button>
                </td>

            </tr>
            }
        </tbody>
    </table>
}




@code {
    private string SearchTerm { get; set; } = "";
    private int Page { get; set; } = 0;
    private int PageSize { get; set; } = 1000;
    private List<CustomerDto.ActiveCustomerSearchListItem> customerlist;
    bool Isloading = false;

    async void CreateNew_Clicked()
    {
        ModalDialogResult result = await ModalDialog.ShowDialogAsync<CreateCustomer>("");
        if (result.Success)
        {
            var searchterm = result.ReturnParameters.Get<string>("PhoneNo");
            await SearchCustomers(searchterm);
        }
    }


    private async Task Search(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter") // fire on enter
        {
            Isloading = true;
            await SearchCustomers(SearchTerm);
            Isloading = false;
        }
    }

    async Task SearchCustomers(string searchterm)
    {
        customerlist = (await client.GetFromJsonAsync<List<CustomerDto.ActiveCustomerSearchListItem>>($"gateway/customer/search?SearchTerm={searchterm}&Page={Page}&PageSize={PageSize}")).ToList();

    }

    async void Edit_Clicked(Guid id)
    {
        ModalDialogParameters parameters = new ModalDialogParameters();
        parameters.Add("CustomerId", id);

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<Delpin.WebClient.Pages.LeaseStuff.EditLease>("", new ModalDialogOptions(), parameters);
        if (result.Success)
        {
            var searchterm = result.ReturnParameters.Get<string>("PhoneNo");
            await SearchCustomers(searchterm);
        }
    }

    async Task Delete(CustomerDto.ActiveCustomerSearchListItem customer)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Vil du slette {customer.FullName}?"))
        {
            await client.DeleteAsync($"gateway/customer?CustomerId={customer.CustomerId}&IsDeleted={true}");
            await SearchCustomers(SearchTerm);
        }
    }

    async void CreateNewLease_Clicked(Guid id, string customerName)
    {
        ModalDialogParameters parameters = new ModalDialogParameters();
        parameters.Add("CustomerId", id);
        parameters.Add("CustomerName", customerName);

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<LeaseStuff.CreateLease>("", new ModalDialogOptions(), parameters);
    }

}
