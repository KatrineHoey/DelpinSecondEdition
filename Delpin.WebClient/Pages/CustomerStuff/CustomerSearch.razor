@page "/customer/search"
@inject HttpClient client

<h3>Kunder</h3>

<section class="form-inline active-cyan-4 mb-3">
    <i class="fas fa-search mr-2 myicons" aria-hidden="true"></i>
    <input @bind-value="@SearchTerm" @bind-value:event="oninput" @onkeyup="Search" class="form-control mr-3 w-75 display-1" type="text" placeholder="Search" aria-label="Search">
    @if (Isloading == true)
    {
        <i class="fa fa-circle-o-notch fa-spin myicons"  aria-hidden="true"></i>
    }
</section>



@if (customerlist == null)
{
    <p><em></em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Navn</th>
                <th>By</th>
                <th>Tlf.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerlist)
            {
                <tr>
                    <td>@customer.CustomerId</td>
                    <td>@customer.FullName</td>
                    <td>@customer.City</td>
                    <td>@customer.PhoneNo</td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    string SearchTerm { get; set; } = "";
    private int Page { get; set; } = 0;
    private int PageSize { get; set; } = 10;
    private List<CustomerDto.ActiveCustomerSearchListItem> customerlist;
    bool Isloading = false;



    private async Task Search(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter") // fire on enter
        {
            Isloading = true;
            await SearchCustomers();
            Isloading = false;
        }
    }

    async Task SearchCustomers()
    {
        customerlist = (await client.GetFromJsonAsync<List<CustomerDto.ActiveCustomerSearchListItem>>($"https://localhost:44311/customer/search?SearchTerm={SearchTerm}&Page={Page}&PageSize={PageSize}")).ToList();

    }

}
