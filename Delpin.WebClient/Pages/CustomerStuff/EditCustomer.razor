@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject IModalDialogService ModalDialogService

<h3>Ændre i kunde</h3>

<CustomerForm ButtonText="Gem" Customer="@customer"
              OnValidSubmit="@Edit" />
@if (Isloading == true)
{
    <i class="fa fa-circle-o-notch fa-spin myicons text-center mt-2" aria-hidden="true"></i>
}



@code {
    [Parameter] public Guid CustomerId { get; set; }

    CustomerViewModel.CustomerDetails customer = new CustomerViewModel.CustomerDetails();



    bool Isloading = false;
    bool everythingWentGood = true;

    protected async override Task OnParametersSetAsync()
    {
        customer = await http.GetFromJsonAsync<CustomerViewModel.CustomerDetails>($"gateway/customer?CustomerId={CustomerId}");
    }

    async Task Edit()
    {
        Delpin.Shared.CustomerModels.ReadModelsDto.CustomerDetails customerDto = CustomerDetailsMapper.Map(customer);

        Isloading = true;
        try
        {
            HttpResponseMessage response = null;
            response = await http.PutAsJsonAsync($"gateway/customer/fullname?CustomerId={CustomerId}&FullName={customerDto.FullName}", customerDto);
            CheckIfFailed(response);


            response = await http.PutAsJsonAsync($"gateway/customer/phone?CustomerId={CustomerId}&PhoneNo={customerDto.PhoneNo}", customerDto);
            CheckIfFailed(response);

            response = await http.PutAsJsonAsync($"gateway/customer/email?CustomerId={CustomerId}&Email={customerDto.Email}", customerDto);
            CheckIfFailed(response);

            response = await http.PutAsJsonAsync($"gateway/customer/adresse?CustomerId={CustomerId}&Street={customerDto.Street}&ZipCode={customerDto.ZipCode}&City={customerDto.City}", customerDto);
            CheckIfFailed(response);

            response = await http.PutAsJsonAsync($"gateway/customer/customertype?CustomerId={CustomerId}&CustomerType={customerDto.CustomerType}", customerDto);
            CheckIfFailed(response);


            if (everythingWentGood == true)
            {

                await js.InvokeVoidAsync("alert", $"Kunden er nu opdateret!");

                ModalDialogParameters returnParameters = new ModalDialogParameters();
                returnParameters.Add("PhoneNo", customerDto.PhoneNo.ToString());
                ModalDialogService.Close(true, returnParameters);
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
            }

        }
        catch (Exception)
        {

            await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
        }


        Isloading = false;
    }

    private void CheckIfFailed(HttpResponseMessage response)
    {
        if (!response.IsSuccessStatusCode)
        {
            everythingWentGood = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int tal = 7;
        Console.WriteLine(tal);
    }
}