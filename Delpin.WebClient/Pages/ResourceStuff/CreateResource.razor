@page "/resource/create"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject IModalDialogService ModalDialogService

<h3>Opret ny ressource</h3>

<ResourceForm ButtonText="Opret ny ressource" Resource="@resource"
              OnValidSubmit="@Create" />
@if (Isloading == true)
{
    <i class="fa fa-circle-o-notch fa-spin myicons text-center mt-2" aria-hidden="true"></i>
}

@code {
    ResourceViewModel.ResourceDetails resource = new ResourceViewModel.ResourceDetails();
    bool Isloading = false;

    async Task Create()
    {
        Isloading = true;
        try
        {
            var id = Guid.NewGuid();
            var response = await http.PostAsJsonAsync($"gateway/resource?Id={id}&ResourceName={resource.ResourceName}" +
                $"&ResourceNo={resource.ResourceNo}&ResourcePrice={resource.ResourcePrice}", resource);
            if (response.IsSuccessStatusCode)
            {

                await js.InvokeVoidAsync("alert", $"Resourcen er nu oprettet!");

                ModalDialogParameters returnParameters = new ModalDialogParameters();
                returnParameters.Add("ResourceName", resource.ResourceName.ToString());
                ModalDialogService.Close(true, returnParameters);

            }
            else
            {
                await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
            }

        }
        catch (Exception)
        {

            await js.InvokeVoidAsync("alert", $"Noget gik galt! Prøv igen.");
        }


        Isloading = false;
    }
}