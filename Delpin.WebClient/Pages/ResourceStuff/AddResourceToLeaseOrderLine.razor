@page "/Resource/AddResourceToLeaseOrderLine"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject IModalDialogService ModalDialog

@using Delpin.WebClient.Pages.LeaseStuff;


<h3>Vælg Resource Til OrderLinjen</h3>
<br>
<br />


<table class="table">
    <thead>
        <tr>
            <th>Ressource Nr</th>
            <th>Ressource Navn</th>
            <th>Ressource Pris</th>

            <th> </th>
            <th> </th>
        </tr>
    </thead>

    @if (rescourcelist == null)
    {
        <p><em></em></p>
    }
    else
    {
        <tbody>
            @foreach (var resource in rescourcelist)
            {
                <tr>
                    <td>@resource.ResourceNo</td>
                    <td>@resource.ResourceName</td>
                    <td>@resource.ResourcePrice</td>

                    @*<td>
                        <button @onclick="@(() => Edit_Clicked(customer.CustomerId))" class="btn btn-primary float-right mr-3">Rediger</button>
                    </td>*@


                </tr>
            }
        </tbody>
    }
</table>





@code {

    private List<ResourceViewModel.ResourceDetails> rescourcelist;

    bool Isloading = false;

    protected override async Task OnInitializedAsync()
    {
        Isloading = true;
        rescourcelist = await http.GetFromJsonAsync<List<ResourceViewModel.ResourceDetails>>($"/gateway/GetAll");
        Isloading = false;
    }

    async void AddResourceToLeaseOrderLine_Clicked(Guid id)
    {
        ModalDialogParameters parameters = new ModalDialogParameters();
        //parameters.Add("LeaseId", Guid.Parse(LeaseId));

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<AddLeaseOrderLine>("", new ModalDialogOptions(), parameters);
    }



}
