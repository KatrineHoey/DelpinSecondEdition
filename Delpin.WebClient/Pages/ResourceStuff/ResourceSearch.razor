@page "/resource/search"
@inject HttpClient client
@inject IJSRuntime js
@inject IModalDialogService ModalDialog

<section>
    <h3>Ressourcer</h3>

    <button @onclick="CreateNew_Clicked" class="btn btn-primary float-right mr-3">Opret ny resource</button>

</section>

<section class="form-inline active-cyan-4 mb-3">
    <i class="fas fa-search mr-2 myicons" aria-hidden="true"></i>
    <input @bind-value="@SearchTerm" @onkeyup="Search" class="form-control mr-3 w-75 display-1" type="text" placeholder="Search" aria-label="Search">
    @if (Isloading == true)
    {
        <i class="fa fa-circle-o-notch fa-spin myicons" aria-hidden="true"></i>
    }
</section>



@if (resourceList == null)
{
    <p><em></em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Navn</th>
                <th>Resource nummer</th>
                <th>Resource pris</th>
                <th> </th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in resourceList)
            {
                <tr>
                    <td>@resource.ResourceName</td>
                    <td>@resource.ResourceNo</td>
                    <td>@resource.ResourcePrice</td>
                    <td>
                        <button @onclick="@(() => Edit_Clicked(resource.ResourceId))" class="btn btn-primary float-right mr-3">Rediger</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(resource))">Slet</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}




@code {
    private string SearchTerm { get; set; } = "";
    private int Page { get; set; } = 0;
    private int PageSize { get; set; } = 1000;
    private List<ResourceViewModel.ActiveResourceSearchListItem> resourceList;
    bool Isloading = false;

    protected override async Task OnInitializedAsync()
    {
        await GetListOfResource();
    }

    private async Task GetListOfResource()
    {
        resourceList = (await client.GetFromJsonAsync<List<ResourceViewModel.ActiveResourceSearchListItem>>("gateway/GetAll")).ToList();
    }

    async void CreateNew_Clicked()
    {
        ModalDialogResult result = await ModalDialog.ShowDialogAsync<CreateResource>("");
        if (result.Success)
        {
            var searchterm = result.ReturnParameters.Get<string>("ResourceName");
            await SearchResources(searchterm);
        }
    }


    private async Task Search(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter") // fire on enter
        {
            Isloading = true;
            if (string.IsNullOrEmpty(SearchTerm))
            {
                GetListOfResource();
            }
            else
            {

                await SearchResources(SearchTerm);
            }
            Isloading = false;
        }
    }

    async Task SearchResources(string searchterm)
    {
        resourceList = (await client.GetFromJsonAsync<List<ResourceViewModel.ActiveResourceSearchListItem>>($"gateway/Search?Searchterm={searchterm}")).ToList();        

    }

    async void Edit_Clicked(Guid id)
    {
        ModalDialogParameters parameters = new ModalDialogParameters();
        parameters.Add("ResourceId", id);

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<EditResource>("", new ModalDialogOptions(), parameters);
        if (result.Success)
        {
            var searchterm = result.ReturnParameters.Get<string>("ResourceName");            
            await GetListOfResource();
        }
    }

    async Task Delete(ResourceViewModel.ActiveResourceSearchListItem resource)
    {
        ResourceDto.ActiveResourceSearchListItem resourceDto = ActiveResourceSearchListItemMapper.Map(resource);

        if (await js.InvokeAsync<bool>("confirm", $"Vil du slette {resourceDto.ResourceName}?"))
        {
            await client.DeleteAsync($"gateway/resource?Id={resourceDto.ResourceId}&IsDeleted={true}");            
            await GetListOfResource();
        }
    }    

}